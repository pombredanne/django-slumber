2013-10-28  Kirit Saelensminde  <kirit@felspar.com>
 Allow us to set up a POST expectation, but not test on the post data itself by setting the expected data to None.

2013-09-24  Kirit Saelensminde  <kirit@felspar.com>
 The decorator `slumber.connector.ua.for_user` now copies the wrapped function name so that it can be used for tests etc. where the original function name is still needed.

2013-09-18  Chirapat Harigulrak  <chirapat@proteus-tech.com>
 Make the create operation work for models who don't have a primary key of a numeric sequence.

2013-07-11  Kirit Saelensminde  <kirit@felspar.com>
 UTF-7 encode the user name in the Authorization header and in the X-FOST-User header.
 Allow for Unicode data in user names and passwords when remote authenticating.

2013-06-04  Kirit Saelensminde  <kirit@felspar.com>
 Fixed up some NULL handling problems for the database fields on RemoteForeignKey thanks to Jsaytoe.

2013-04-18  Kirit Saelensminde  <kirit@felspar.com>
 Added in a Django 1.5 test project and made suitable changes to the code to account for it.
 Add a South introspection rule for the custom remote foreign key field.

2013-02-14  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a bug in the caching code that meant that the cache never had any data added to it.
 The create operation now adds a `pk` data field in the root which can be used to fetch the primary key value that was issued and a `created` one which determines whether a new instance was made or not.
 Allow a setting `SLUMBER_LOCAL_PREFIX` to be used to override the local prefix calculated from the service name for older configurations that don't make use of a service name.

2012-10-04  Chokchai Phatharamalai  <juacompe@proteus-tech.com>
 Change the instance cache to be thread safe.

2012-10-02  ruxo  <samrit@proteus-tech.com>
 Instantiate FakeClient every time. Singleton of Fakeclient keeps error state of previous web call which will eventually raise again on the subsequent call no matter if it is success or not.

2012-08-06  jsaytoe  <jsaytoe@proteus-tech.com>
 Added `update` method to mock instances to make writing tests using it simpler.

2012-08-06  Dui Satsana  <dui@proteus-tech.com>
 Added `update` method to proxy base class so all remote objects can update easily.

2012-07-17  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a bug where GET requests against remote servers using query strings weren't always signed correctly.

2012-06-29  Kirit Saelensminde  <kirit@felspar.com>
 Added a `for_user` decorator to the user agent that can be used to set the user name used for requests to other services.

2012-06-18  Kirit Saelensminde  <kirit@felspar.com>
 Allow us to bypass redirects with the fake HTTP client in the user agent. Useful for testing redirects.

2012-06-14  Kirit Saelensminde  <kirit@felspar.com>
 Added a create member to the mock models on the mock client.
 If the client instance is not given an explicit `pk` member then we will try to build its URL from the `id` member if it has that.
 Fixed a bug where mock instances were not found for some configurations.

2012-06-07  Kirit Saelensminde  <kirit@felspar.com>
 The mock client model method `get` now returns an instance proxy as it should (when it can). If there isn't enough information to build a proper instance URL then it will continue to return the mock instance directly.
 Have had to change the URL scheme for the operation URLs in the mock client from slumber: to http: as Python's urlparse.urljoin won't work otherwise. Have also changed the instance operations to include the primary key (if given).

2012-06-05  Kirit Saelensminde  <kirit@felspar.com>
 Make sure that if a URL is used in a query directly it is properly converted to a Slumber URL as appropriate.

2012-05-31  Kirit Saelensminde  <kirit@felspar.com>
 The mock client now uses the same model type constructor as the real client. This means that proxies are properly applied.
 The mock `get` method now tries to convert both values to unicode and if they compare then it will accept that. This avoids a problem where strings wouldn't compare properly with numbers.
 When instances are fetched from a remote service the mock client is checked first to see if it is already holding the instance. If it is then it is used.
 Added a new `mock_ua` test decorator that can be used to set expectations for the user agent so that proxies (and other communication with the Slumber user agent) can be much more easily tested.
 Allow `slumber.connector.api.get_instance` to take Slumber scheme URLs for both the model and the instance to make instances easier to pass between services and in tests.

2012-05-30  Kirit Saelensminde  <kirit@felspar.com>
 Changed the type name for the instance type so we no longer need to do any model look ups to calculate the name.

2012-05-24  Kirit Saelensminde  <kirit@felspar.com>
 Optimised the solution to application of the client proxies to delay as long as possible HTTP requests. Many uses of remote instances no longer trigger any HTTP requests at all.

2012-05-23  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a problem where client proxies weren't always being applied properly when instances were fetched out of the database. The current solution solves it by forcing a HTTP request, but there should be a better way of doing this.

2012-05-18  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a problem with deep copies of remote objects that was causing Django to throw errors when they were used in certain types of query.
 Added a number of attributes to the instance proxy that it will never have, so just throw an attribute error for them straight away. This cuts down on HTTP chatter, especially in tests.

2012-05-17  Kirit Saelensminde  <kirit@felspar.com>
 The create operation now resets the sequence numbers in case a primary key on an auto-increment field is specified.
 The user agent get function can now also be given status codes that it will accept as expected.
 The TTL on proxies is now set to two seconds. There are circumstances under which this might be unsafe. The user agent remains with a zero second TTL.

2012-05-16  Kirit Saelensminde  <kirit@felspar.com>
 The mock client instances can now be used in queries properly. Added some extra tests to make sure that normal remote instances, or their normalised URLs work as expected in queries.

2012-05-15  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a problem where the create operation would always convert values to strings. This broke `null` values sent over the wire.
 Set a httplib2 option so that SSL certificates are not checked.

2012-05-14  Kirit Saelensminde  <kirit@felspar.com>
 Treat any request whose Content-Type starts with 'application/json' as JSON rather than look for an exact match.

2012-05-08  Kirit Saelensminde  <kirit@felspar.com>
 Altered the RemoteForeignKey field's get_prep_value so that it uses the super method of the same name instead of delegating to the get_db_prep_value method. This fixes a problem on Django 1.4 in queries.

2012-05-01  Kirit Saelensminde  <kirit@felspar.com>
 The internal (fake HTTP) requests will now prefer to send JSON to the client as it is a richer data format that the standard HTTP media types.

2012-04-29  Kirit Saelensminde  <kirit@felspar.com>
 The conversion of types to JSON no longer takes a request as the first parameter. This allows objects to be converted without having to do it within the context of a request.
 Added JSON handler for the server side of the field type NullBooleanField.
 Fixed a bug where the user agent would sign the wrong POST data.
 The update operation no longer returns a redirect.
 Many to many fields now appear in the data arrays section of the instance fields rather than with the other fields.
 The user agent POST requester can now be provided with a list of status codes that it will accept as successful and if it cannot parse the JSON body it will return an empty dict.

2012-04-18  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a problem where forwarded authentication could lead to an infinite recursion error.

2012-04-13  Kirit Saelensminde  <kirit@felspar.com>
 Try to be much stricter about which applications get which models. This fixes a problem where models were associated with applications that made use of them, rather than just the one that defined them.

2012-04-05  Kirit Saelensminde  <kirit@felspar.com>
 The authentication forwarding backend is now properly compatible with the real Fost authn request signing.
 The type of the user_id that we see is important as it tells us what we need to look it up with.

2012-04-02  Kirit Saelensminde  <kirit@felspar.com>
 Requests are now signed when going back to another service.
 Added a Realm to the WWW-Authentication header.
 Added django-fost-authn to the setup.py requirements.

2012-03-30  Kirit Saelensminde  <kirit@felspar.com>
 Client side proxies are now loaded via the new SLUMBER_CLIENT_APPS setting.

2012-03-28  Kirit Saelensminde  <kirit@felspar.com>
 Permissions are now checked on several of the default operations.

2012-03-27  Kirit Saelensminde  <kirit@felspar.com>
 Better error responses are returned to the client based on a number of exceptions that might be thrown.

2012-03-23  Kirit Saelensminde  <kirit@felspar.com>
 Added a form field and basic widget for the RemoteForeignKey model field type.

2012-03-20  Kirit Saelensminde  <kirit@felspar.com>
 The server side operations can now be added to.

2012-02-23  Kirit Saelensminde  <kirit@felspar.com>
 Added a form field and basic widget for the RemoteForeignKey model field type.

2012-02-22  Kirit Saelensminde  <kirit@felspar.com>
 Added a RemoteForeignKey field type which can be used to handle Slumber objects running in the same or remote services.

2012-02-18  Kirit Saelensminde  <kirit@felspar.com>
 Added a proxy method for the model create operation. This has also changed the data returned by the old create operation.
 Added CSRF bypassing on the Slumber views (if the version of Django uses CSRF).
 Internal services now get the application directly rather than what would have been the service root.

2012-02-17  Kirit Saelensminde  <kirit@felspar.com>
 Added tests for Django 1.4.
 Added an incomplete version of a new configuration that will allow specific Django applications to be exposed on specific service names.

2012-01-30  Kirit Saelensminde  <kirit@felspar.com>
 Forced the model URL used for the type name to be a str as some Windows boxes seem to get Unicode strings for the URLs where most machines gets normal Python strings.

2012-01-16  Kirit Saelensminde  <kirit@felspar.com>
 The server side conversion to JSON compatible Python objects now includes the request so that, for example, URIs can be handled correctly.
 The Slumber configuration now also allows us to add in JSON transform functions for specific types for when property values are processed.

2012-01-12  Kirit Saelensminde  <kirit@felspar.com>
 Renamed the slumber_test folder to slumber_examples.
 Added the beginnings of the server side configuration by allowing model properties to be exposed.

2011-12-29  Kirit Saelensminde  <kirit@felspar.com>
 Fixed the license information in the setup tags.
 Removed the .idea files generated by some IDE.

2011-12-02  Kirit Saelensminde  <kirit@felspar.com>
 The authentication back end now copies across the attribute values and resets them on the local user each time the user is fetched from the backend.

2011-11-29  Kirit Saelensminde  <kirit@felspar.com>
 Added HTTP caching that can be controlled on a per-model basis.
 The POST method in the connector user agent now also creates a new Http object for each request.

2011-11-28  Kirit Saelensminde  <kirit@felspar.com>
 Changed the model `get` operation so that it returns the data directly without doing a redirect first thus saving a HTTP request.
 Get requests from the client will now get retried up to three times.
 Added an implementation for get_profile which will bring the profile from the auth service to the auth client.

2011-11-02  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a bug where the Django session would result in the wrong user, or a failed log in when the remote and local users had different primary key values.

2011-11-02  Chokchai Phatharamalai  <juacompe@proteus-tech.com>
 Changed the way that Httplib2 is used so that the same Http object is no longer re-used. This should improve reliability, but will have a (hopefully minimal) impact on performance.

2011-10-26  Kirit Saelensminde  <kirit@felspar.com>
 Allow an authentication request to be passed on to another auth service elsewhere.

2011-10-20  Kirit Saelensminde  <kirit@felspar.com>
 Added a remote authentication capability that allows a remote authentication/authorization service to be used for local authentication.

2011-10-16  Kirit Saelensminde  <kirit@felspar.com>
 Added in the ability to handle multiple services spread across multiple Django projects.

2011-09-06  Kirit Saelensminde  <kirit@felspar.com>
 Added a User operation that allows permissions to be checked.

2011-08-27  Kirit Saelensminde  <kirit@felspar.com>
 Added an instance cache together with some cache flushing middleware. This should improve the efficiency of the cache and reduce the number of requests to fetch objects from the back end.

2011-08-25  Kirit Saelensminde  <kirit@felspar.com>
 We are now able to authenticate Django Users.

2011-08-22  Kirit Saelensminde  <kirit@felspar.com>
 Added a delete operation for instances.

2011-08-10  Kirit Saelensminde  <kirit@felspar.com>
 The type of the returned instances in the client from `get` now makes sense.

2011-08-08  Kirit Saelensminde  <kirit@felspar.com>
 Added a server side implementation for updating instances.
 The model `get` method can now be passed any unique combination of attributes and the right instance will be returned.

2011-08-05  Kirit Saelensminde  <kirit@felspar.com>
 The server operations can now implement either `operation` or the HTTP method that they need to execute with. Unsupported methods will return a 403.
 Refactored the layout of the operations.

2011-07-28  Kirit Saelensminde  <kirit@felspar.com>
 Added some simple mocking capability so that client code that uses Slumber can be tested.

2011-07-27  Kirit Saelensminde  <kirit@felspar.com>
 The Slumber client now includes (more or less) full support for the object graph structure.

2011-07-22  juacompe  <juacompe@squire.proteus-tech.com>
 Added a skeleton for a Slumber client.

2011-07-20  Kirit Saelensminde  <kirit@felspar.com>
 Initial version that shows how Slumber should look when completed.
 Added ChangeLog
